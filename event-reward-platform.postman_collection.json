{
	"info": {
		"_postman_id": "08610860-2c24-4ddc-af2c-de15b05fde4d",
		"name": "이벤트/보상 관리 플랫폼 API 테스트",
		"description": "이벤트/보상 관리 플랫폼의 모든 API를 테스트하기 위한 Postman 컬렉션입니다.\n\n**사전 설정:**\n1. `gateway_url` 컬렉션 변수가 올바른 게이트웨이 서버 주소로 설정되어 있는지 확인하세요 (기본값: http://localhost:3000).\n2. 사용자 등록 및 로그인 요청을 먼저 실행하여 각 사용자 역할에 맞는 JWT 토큰을 획득하세요.\n3. 획득한 토큰은 해당 요청의 \"Tests\" 탭에 있는 스크립트에 의해 컬렉션 변수(예: `user1_token`, `operator_token`)에 자동으로 저장됩니다. (일부 요청에만 설정되어 있으니, 필요시 직접 변수 값을 `Bearer <토큰값>` 형태로 수정하세요.)\n4. 이벤트, 보상 등 리소스 생성 후 반환되는 ID 값은 후속 요청에서 사용할 수 있도록 컬렉션 변수(예: `created_event_id_1`)에 자동으로 저장될 수 있도록 일부 요청의 \"Tests\" 탭에 스크립트가 포함되어 있습니다. (필요시 수동으로 변수 값을 업데이트하세요.)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4783314"
	},
	"item": [
		{
			"name": "Auth Server",
			"item": [
				{
					"name": "운영자(Operator) 사용자 회원가입",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testoperator01\",\n  \"email\": \"operator01@example.com\",\n  \"password\": \"password123\",\n  \"roles\": [\"OPERATOR\", \"USER\"]\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/auth/register",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "감사자(Auditor) 사용자 회원가입",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testauditor01\",\n  \"email\": \"auditor01@example.com\",\n  \"password\": \"password123\",\n  \"roles\": [\"AUDITOR\", \"USER\"]\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/auth/register",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "일반 사용자 1 회원가입",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser01\",\n  \"email\": \"user01@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/auth/register",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "일반 사용자 2 회원가입",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser02\",\n  \"email\": \"user02@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/auth/register",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "사용자 로그인 - User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and token received\", function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.be.a('string');",
									"    if (jsonData.accessToken) {",
									"        pm.collectionVariables.set(\"user1_token\", jsonData.accessToken);",
									"        console.log(\"User1 token set!\");",
									"    }",
									"    if (jsonData.user && jsonData.user._id) {",
									"        pm.collectionVariables.set(\"user1_id\", jsonData.user._id);",
									"        console.log(\"User1 ID set to: \" + jsonData.user._id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser01\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/auth/login",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "사용자 로그인 - Operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and token received\", function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.be.a('string');",
									"    if (jsonData.accessToken) {",
									"        pm.collectionVariables.set(\"operator_token\", jsonData.accessToken);",
									"        console.log(\"Operator token set!\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testoperator01\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/auth/login",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "사용자 로그인 - Auditor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and token received\", function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.be.a('string');",
									"    if (jsonData.accessToken) {",
									"        pm.collectionVariables.set(\"auditor_token\", jsonData.accessToken);",
									"        console.log(\"Auditor token set!\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testauditor01\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/auth/login",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "내 정보 조회 - User1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user1_token}}"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/auth/me",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			],
			"description": "인증 및 사용자 관리 관련 API"
		},
		{
			"name": "Event Server - 이벤트 관리",
			"item": [
				{
					"name": "이벤트 생성 (운영자)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 and event created\", function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData._id).to.be.a('string');",
									"    if (jsonData._id) {",
									"        pm.collectionVariables.set(\"created_event_id_1\", jsonData._id);",
									"        console.log(\"created_event_id_1 set to: \" + jsonData._id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{operator_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"새로운 7일 출석 이벤트!\",\n  \"description\": \"매일 출석하고 특별한 보상을 받으세요!\",\n  \"startDate\": \"{{isoTimestampTomorrow}}\",\n  \"endDate\": \"{{isoTimestampOneMonthLater}}\",\n  \"status\": \"SCHEDULED\",\n  \"conditions\": [\n    {\n      \"type\": \"LOGIN_STREAK\",\n      \"value\": 7,\n      \"description\": \"7일 연속 로그인 달성\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/events",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "활성 이벤트 생성 (운영자, ALWAYS_TRUE 조건)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 and event created\", function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData._id).to.be.a('string');",
									"    if (jsonData._id) {",
									"        pm.collectionVariables.set(\"created_event_id_2\", jsonData._id);",
									"        console.log(\"created_event_id_2 set to: \" + jsonData._id);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{operator_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"즉시 시작! 친구 초대 이벤트 (테스트용)\",\n    \"description\": \"친구를 초대하고 바로 보상을 받으세요! (조건: ALWAYS_TRUE)\",\n    \"startDate\": \"{{$isoTimestamp}}\",\n    \"endDate\": \"{{isoTimestampOneMonthLater}}\",\n    \"status\": \"ACTIVE\",\n    \"conditions\": [\n        {\n            \"type\": \"ALWAYS_TRUE\",\n            \"value\": true,\n            \"description\": \"항상 참 조건 (테스트용)\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/events",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "이벤트 목록 조회",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user1_token}}"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/events",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "특정 이벤트 조회",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user1_token}}"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/events/{{created_event_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"events",
								"{{created_event_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "이벤트 수정 (운영자)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{operator_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"7일 출석 이벤트 설명 수정됨 - 더 좋은 보상!\",\n  \"status\": \"ACTIVE\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/events/{{created_event_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"events",
								"{{created_event_id_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "이벤트 삭제 (운영자)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{operator_token}}"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/events/{{created_event_id_1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"events",
								"{{created_event_id_1}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "이벤트 생성, 조회, 수정, 삭제 API"
		},
		{
			"name": "Event Server - 보상 관리",
			"item": [
				{
					"name": "보상 등록 (운영자, 이벤트 2에 대한 보상)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 and reward created\", function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData._id).to.be.a('string');",
									"    if (jsonData._id) {",
									"        pm.collectionVariables.set(\"created_reward_id_1_for_event_2\", jsonData._id);",
									"        console.log(\"created_reward_id_1_for_event_2 set to: \" + jsonData._id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{operator_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventId\": \"{{created_event_id_2}}\",\n  \"name\": \"친구 초대 1000 포인트\",\n  \"type\": \"POINT\",\n  \"quantity\": 1000,\n  \"stock\": 100\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/rewards",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"rewards"
							]
						}
					},
					"response": []
				},
				{
					"name": "특정 이벤트의 보상 목록 조회",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user1_token}}"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/rewards/event/{{created_event_id_2}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"rewards",
								"event",
								"{{created_event_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "특정 보상 조회",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user1_token}}"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/rewards/{{created_reward_id_1_for_event_2}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"rewards",
								"{{created_reward_id_1_for_event_2}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "이벤트 보상 등록, 조회, 수정, 삭제 API"
		},
		{
			"name": "Event Server - 보상 요청 관리",
			"item": [
				{
					"name": "보상 요청 생성 (User1, 이벤트 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 and reward request created\", function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData._id).to.be.a('string');",
									"    if (jsonData._id) {",
									"        pm.collectionVariables.set(\"reward_request_id_user1_event2_reward1\", jsonData._id);",
									"        console.log(\"reward_request_id_user1_event2_reward1 set to: \" + jsonData._id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{user1_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventId\": \"{{created_event_id_2}}\",\n  \"rewardId\": \"{{created_reward_id_1_for_event_2}}\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/reward-requests",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"reward-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "내 보상 요청 목록 조회 (User1)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user1_token}}"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/reward-requests/my-requests",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"reward-requests",
								"my-requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "전체 보상 요청 목록 조회 (운영자)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{operator_token}}"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/reward-requests?page=1&limit=10&status=PENDING",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"reward-requests"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "status",
									"value": "PENDING"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "특정 보상 요청 상세 조회 (운영자)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{operator_token}}"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/reward-requests/{{reward_request_id_user1_event2_reward1}}",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"reward-requests",
								"{{reward_request_id_user1_event2_reward1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "보상 요청 상태 변경 (운영자, PENDING -> APPROVED)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{operator_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"APPROVED\",\n  \"reason\": \"운영자 승인\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/reward-requests/{{reward_request_id_user1_event2_reward1}}/status",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"reward-requests",
								"{{reward_request_id_user1_event2_reward1}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "보상 요청 상태 변경 (운영자, APPROVED -> COMPLETED)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{operator_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{operator_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"COMPLETED\"\n}"
						},
						"url": {
							"raw": "{{gateway_url}}/reward-requests/{{reward_request_id_user1_event2_reward1}}/status",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"reward-requests",
								"{{reward_request_id_user1_event2_reward1}}",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"description": "사용자 보상 요청 생성, 조회, 상태 변경 API"
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// 현재 시간 기반 동적 타임스탬프 설정",
					"const now = new Date();",
					"pm.collectionVariables.set(\"isoTimestamp\", now.toISOString());",
					"",
					"const tomorrow = new Date(now);",
					"tomorrow.setDate(now.getDate() + 1);",
					"pm.collectionVariables.set(\"isoTimestampTomorrow\", tomorrow.toISOString());",
					"",
					"const oneWeekLater = new Date(now);",
					"oneWeekLater.setDate(now.getDate() + 7);",
					"pm.collectionVariables.set(\"isoTimestampOneWeekLater\", oneWeekLater.toISOString());",
					"",
					"const oneMonthLater = new Date(now);",
					"oneMonthLater.setMonth(now.getMonth() + 1);",
					"pm.collectionVariables.set(\"isoTimestampOneMonthLater\", oneMonthLater.toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "gateway_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "Bearer YOUR_ADMIN_TOKEN_HERE",
			"type": "string"
		},
		{
			"key": "operator_token",
			"value": "Bearer YOUR_OPERATOR_TOKEN_HERE",
			"type": "string"
		},
		{
			"key": "auditor_token",
			"value": "Bearer YOUR_AUDITOR_TOKEN_HERE",
			"type": "string"
		},
		{
			"key": "user1_token",
			"value": "Bearer YOUR_USER1_TOKEN_HERE",
			"type": "string"
		},
		{
			"key": "user1_id",
			"value": "USER1_ID_FROM_LOGIN_RESPONSE",
			"type": "string"
		},
		{
			"key": "created_event_id_1",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_event_id_2",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_reward_id_1_for_event_2",
			"value": "",
			"type": "string"
		},
		{
			"key": "reward_request_id_user1_event2_reward1",
			"value": "",
			"type": "string"
		},
		{
			"key": "isoTimestamp",
			"value": "",
			"type": "string"
		},
		{
			"key": "isoTimestampTomorrow",
			"value": "",
			"type": "string"
		},
		{
			"key": "isoTimestampOneWeekLater",
			"value": "",
			"type": "string"
		},
		{
			"key": "isoTimestampOneMonthLater",
			"value": "",
			"type": "string"
		}
	]
}